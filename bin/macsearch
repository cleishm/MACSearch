#!/usr/bin/env perl

use strict;
use warnings;
use Net::SNMP;
use Net::SNMP::Mixin qw/mixer init_mixins/;
use DBI;
use Getopt::Long;

sub prepare_db ($);
sub load_tables ($@);
sub query_tables ($$$%);

my $quiet;
my $verbose;
my $noheader;
my $macs;
my $ports;
my $vlans;
my $exclude_ports;
my $cache_file;
Getopt::Long::Configure('bundling');
GetOptions(
	'q|quiet' => \$quiet,
	'v|verbose' => \$verbose,
	'Q|noheader' => \$noheader,
	'm|mac:s@' => \$macs,
	'p|port:s@' => \$ports,
	'l|vlan:s@' => \$vlans,
	'P|exclude-port=s@' => \$exclude_ports,
	'c|cache=s' => \$cache_file,
) or die "Invalid argument(s)\n";

unless (scalar @ARGV >= 1) {
	die <<EOM;
usage: $0 [options] hostname [hostname...]
 -q,--quiet           Silence all unnecessary output
 -v,--verbose         Additional output
 -Q,--noheader        Don't add header lines to output
 -m,--mac [mac,...]   Filter output to the specified mac(s).
                      Reads macs from stdin if none specified.
 -p,--port [port,...] Filter output to the specified port(s).
                      Reads ports from stdin if none specified.
 -l,--vlan [vlan,...] Filter output to the specified vlan(s).
                      Reads vlans from stdin if none specified.
 -P,--exclude-port [host:port,...]
                      Exclude the specified host:port combination(s) from output
 -c,--cache file      Read from cached data (or create if not present)

If many are filters are without arguments then the values read from stdin must
be comma separated and in the order 'mac,port,vlan'.

EOM
}

$quiet and undef $verbose;
@$macs = split(/,/, join(',', @$macs)) if defined $macs;
@$ports = split(/,/, join(',', @$ports)) if defined $ports;
@$vlans = split(/,/, join(',', @$vlans)) if defined $vlans;
@$exclude_ports = split(/,/, join(',', @$exclude_ports))
	if defined $exclude_ports;


my $was_cached = 1 if $cache_file and -f $cache_file;
$cache_file ||= '';
my $dbh = DBI->connect("dbi:SQLite:dbname=$cache_file", '', '')
	or die "Failed to init db: $!";

unless ($was_cached) {
	prepare_db($dbh);
	load_tables(\*STDERR, $dbh, @ARGV);
}

query_tables(\*STDOUT, \*STDIN, $dbh,
	macs => $macs,
	ports => $ports,
	vlans => $vlans,
	exlude_ports => $exclude_ports);

exit 0;


sub prepare_db ($) {
	my ($dbh) = @_;
	$dbh->do(qq{
		CREATE TABLE fwd(host, port, mac, vlan)
	}) or die "Failed to create fwd table: $!";
	return $dbh;
}


sub load_tables ($@) {
	my ($OUT, $dbh, @hosts) = @_;

	print $OUT "Loading tables " unless $quiet;
	print $OUT "\n" if $verbose;

	$dbh->do('DELETE FROM fwd');
	my @warnings;
	foreach my $host (@hosts) {
		print $OUT '.' unless $quiet or $verbose;
		eval {
			load_host_table($dbh, $host);
		};
		unless ($@) {
			print $OUT "Table loaded for $host\n" if $verbose;
		} else {
			chomp $@;
			push @warnings, "Failed to load table for $host: $@"
				unless $verbose;
			warn $@, "\n" if $verbose;
		}
	}

	print $OUT " done\n" unless $quiet or $verbose;
	print $OUT "Tables loaded\n" if $verbose;
	warn $_."\n" foreach @warnings;
}


sub load_host_table ($) {
	my ($dbh, $host) = @_;
	my ($session, $error) = Net::SNMP->session(
		-hostname => $host,
		-version => '2c');
	$error and die "$error\n";
	my $sth = $dbh->prepare(qq{
		INSERT INTO fwd(host, port, mac, vlan) VALUES (?, ?, ?, ?)
	});
	eval {
		$session->mixer('Net::SNMP::Mixin::Dot1qFdb');
		$session->init_mixins();
		$session->nonblocking and snmp_dispatcher();
		$session->error and die $session->error."\n";

		my @table = $session->get_dot1q_fdb_entries()
			or die "dot1qfdb query failed";
		foreach my $entry (@table) {
			$sth->execute(
				$host,
				$entry->{dot1dBasePort},
				sanitise_mac($entry->{MacAddress}),
				$entry->{vlanId},
			);
		}
	};
	if ($@) {
		my $err = $@;
		eval { $session->close() };
		die $err;
	}
}


sub query_tables ($$$%) {
	my ($OUT, $IN, $dbh, %filters) = @_;

	my @unbound;
	my @conditions;
	if (defined (my $macs = $filters{macs})) {
		if (@$macs) {
			@$macs = map { sanitise_mac($_) } @$macs;
			push @conditions,'mac in ("'.join('","', @$macs).'")';
		} else {
			push @unbound, \&sanitise_mac;
			push @conditions, 'mac = ?';
		}
	}
	if (defined (my $ports = $filters{ports})) {
		if (@$ports) {
			@$ports = map { sanitise_port($_) } @$ports;
			push @conditions,'port in ("'.join('","', @$ports).'")';
		} else {
			push @unbound, \&sanitise_port;
			push @conditions, 'port = ?';
		}
	}
	if (defined (my $vlans = $filters{vlans})) {
		if (@$vlans) {
			@$vlans = map { sanitise_vlan($_) } @$vlans;
			push @conditions,'vlan in ("'.join('","', @$vlans).'")';
		} else {
			push @unbound, \&sanitise_vlan;
			push @conditions, 'vlan = ?';
		}
	}
	if (defined (my $exclude_ports = $filters{exlude_ports})) {
		foreach (@$exclude_ports) {
			my ($host, $port) = split(':');
			$host = sanitise_host($host);
			$port = sanitise_port($port);
			push @conditions, qq{
				NOT (host = "$host" AND port = "$port")
			};
		}
	}

	@conditions or @conditions = (1);
	my $sth = $dbh->prepare('SELECT host, port, mac, vlan FROM fwd WHERE '.
		join(' AND ', @conditions));
	
	unless (@unbound) {
		$sth->execute();
		output_fwd_table_query_results($OUT, $sth);
		return;
	}

	while (<$IN>) {
		chomp;
		my @params = split(',');
		my @binds = map { $$_[0]->($$_[1]) } zip(\@unbound, \@params);
		$sth->execute(@binds);
		output_fwd_table_query_results($OUT, $sth);
	}
}


sub output_fwd_table_query_results ($$) {
	my ($OUT, $sth) = @_;
	print $OUT join(',', 'Host', 'Port', 'MAC', 'VLAN'), "\n"
		unless $noheader;
	my $found;
	while (my @row = $sth->fetchrow_array) {
		print $OUT join(',', @row), "\n";
		$found = 1;
	}
	not $found and not $quiet and warn "No results for query\n";
}


sub zip (@) {
	my $max = 0;
	do { $max = scalar @$_ if scalar @$_ > $max } foreach @_;
	my @results;
	for (my $i = 0; $i < $max; ++$i) {
		push @results, [ map { $$_[$i] } @_ ];
	}
	return @results;
}


sub sanitise_host ($) {
	my ($host) = @_;
	$host =~ s/^\s*|\s*$//;
	return $host;
}

sub sanitise_port ($) {
	my ($port) = @_;
	$port =~ /^\s*(\d+)\s*$/
		or die "Invalid port '$port'\n";
	return $1;
}


sub sanitise_mac ($) {
	my ($mac) = @_;

	$mac = lc $mac;
	$mac =~ s/^\s+|\s+$//g;
	$mac =~ s/[ -]/:/g;
	$mac =~ s/^([0-9a-f]):/0$1:/;
	$mac =~ s/:([0-9a-f])$/:0$1/;
	$mac =~ s/:([0-9a-f]):/:0$1:/g;
	($mac = lc $mac) =~ s/[: -]//g;
	$mac =~ /^[0-9a-f]{12}$/ or die "Invalid mac '$mac'\n";

	return $mac;
}


sub sanitise_vlan ($) {
	my ($vlan) = @_;
	$vlan =~ /^\s*(\d+)\s*$/
		or die "Invalid vlan '$vlan'\n";
	return $1;
}

1;
